add string              DONE
add getattribute()
add type()

split rule/language grammar

update ADVANCE

=== future ===
define BOOLEAN!!
if *value doesn't exist, need to do other things

=== 6.30 ===
mod attr assign to wrap DONE
  add DUP               DONE
add GET                 DONE
mod RETRIEVE to take v  DONE
add RETRIEVE            DONE
add is assignment       DONE
mod GOTOIFN to take v   DONE
add GOTOIFN             DONE
wrap built-in method
Q lookup and get returns set but want m/v
Q what does alloc() do? take in lbl and return memloc?
Q do we want to create empty obj when wrapping, and move getobj to micro instructions?

=== 7.3 ===
mod WRAP to take 3 args DONE
add ALLOC, mod STORE    DONE
mod RETRIEVE to WRAP    DONE
add scope to BIND       DONE
mod getobj              DONE
  make WRAP a macro     DONE
  fix RAISE             DONE

=== 7.5 ===
2 args for PUSH         DONE
mod graph               DONE
add getscope func       DONE
fix magics              DONE
Q Advance Pop, Raise, Assign, Attr Assign, Return - no scope to bind to?
add bool                DONE
breakdown magic         DONE
Assert type             DONE
Sum micro-instructions  DONE (sort of)

=== 7.6 ===
fix getitem             DONE
assert magic arguments  DONE
add type()              DONE
make macros for magic   DONE
fix call rules          DONE
add magic graph rules   DONE
fix retrieve            DONE
add call()              DONE
add bool()
  magic                 DONE
  micro-instruction     DONE
  helper                DONE
fix GOTOIFN             DONE
fix makeobj             DONE
add getattribute()      DONE
fix get() in graph
get rid of boolean

=== 7.7 ===
mod LOOKUP              DONE
  add RETRIEVE'         DONE
define set of strings   DONE
value to id func        DONE (sort of)
mod STORE return ()     DONE
mod BIND                DONE
  add UPDATE            DONE

=== 7.10 ===
update lamia spec       DONE
add alloc               DONE
add bind,ret,store,get  DONE
add if,fun,while        DONE (sort of)
add raise               DONE

=== 7.11 ===
update if while         DONE
add -ops                DONE
mod raise
Q while/if block alpha-renamed? N
Q haskey helper function? N
q raise from if/while blocks? Y
add more return         DONE

=== 7.12 ===
add graph grammar       DONE
add list index          DONE
add binding constructor DONE
add start, alias        DONE
add if, advance         DONE
add func call,return    DONE
add method bind         DONE
Q Params of functions?
fix RETURN stuff

=== 7.13 ===

add RAISE s             DONE
add while, try          DONE
Q while True: ifresult x allowed? Y
add IFRESULT s          DONE
add more skip           DONE
add notation def        DONE (sort of)
Q What arguments does Lookup take?
Q How to track alloc()?
add LOOKUP()
  def arguments
add memory def          DONE
mod RETURN s

=== 7.14 ===
add listConcat          DONE
rmv methods             DONE
add lookup rules
  ones on the board     DONE
  alias, bind           DONE
  index, is             DONE
  return, try
mod flow node (s,chi)   DONE (sort of)
fix all the raise rules DONE (sort of)
add timestack
  make time macros      DONE
  define time funcs     DONE
add list slice          DONE
add isfunc
add eq, gt, lt

=== 7.17 ===
add more rules
  slice                 DONE
  return, raise         DONE
fix except              DONE
add eq                  DONE
fix ifresult            DONE
add jmp                 DONE
add unop/binop rules    DONE
add isint, isbool       DONE
add store, get          DONE
add skip rules
  while                 DONE
  try                   DONE
classify rules          DONE
mod while structure
add in-func var search
  Q add CALL utils that point to callsite?
put IS back             DONE

=== 7.18 ===
skip while              DONE
stop searching
  function head         DONE
  while head            DONE
  if head               DONE
  try/except head       DONE
fix store               DONE
generalize unop, binop  DONE
skip rules              DONE (sort of)
end of exception        DONE
add instr args
mod JUMP

=== 7.20 ===
add func closure rule
add while unbound       DONE
add if unbound          DONE
skip x's that don't match

=== 7.21 ===
unop/binop              DONE (sort of)
  fix skip              DONE
implement function call DONE (sort of)
slice rule

=== 7.24 ===
fixed:
  capture now counts itself
  capture takes both value and memory
  let_is
  assignment and aliasing
  binding
to do:
  unop/binop giving wrong sets

=== 7.25 ===
fixed:
  unop/binop
  part of advance
  store/get
  if
  lookup y
  while
to do:

=== 7.26 ===
mod CAPTURE sub         DONE
more skip rules

=== 7.27 ===
fix RAISE               DONE
  enter try/except

=== 7.28 ===
lint spec




\item \rulename{Raise \;(bound)}
If $\gnode_1 = \gsLR{\gsraise[\ostmt], \gtime_1}$,
   $\gnode_0 \osUnder \gsLR{\olbl \gtcolon \gttry \gtobrc \ostmts_1 \gtcbrc \gtexcept \omemvariable \gtobrc \ostmts_2 \gtcbrc, \gtime_0}$, and
   $\lstack = [\omemvariable] \listConcat \lstack'$,
then \formalRuleLine $\lresults \supseteq \osFunc{Lookup}(\ggraph, \gnode_1, [\lInstr{Answer}] \listConcat \lstack')$.

\item \rulename{Raise \;(undefined)}
If $\gnode_1 = \gsLR{\gsraise[\ostmt], \gtime_1}$,
   $\gnode_0 \osUnder \gsLR{\olbl \gtcolon \gttry \gtobrc \ostmts_1 \gtcbrc \gtexcept \omemvariable \gtobrc \ostmts_2 \gtcbrc, \gtime_0}$,
   $\lstack = [\omemvariable'] \listConcat \lstack'$, and
   $\omemvariable \neq \omemvariable'$,
then \formalRuleLine $\lresults \supseteq \emptyset$.
